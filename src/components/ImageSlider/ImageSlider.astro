---
import type { ImgAttributes } from "astro:assets";

// ImageSlider.astro
// Props: images: Array<{ src: string, alt: string }>
/**
 * @typedef {{ src: string, alt: string }} ImageItem
 */
/** @type {ImageItem[]} */
const { images = [] } = Astro.props;
const imagesJson = JSON.stringify(images);
---

<div class="image-slider">
  <script type="application/json" id="slider-images" set:html={imagesJson} />
  <div class="slider-track">
    {
      images.map(
        /**
         * @param {ImageItem} img
         * @param {number} idx
         */
        function (img: { src: string; alt: string }, idx: number) {
          return (
            <div class="slider-slide" data-index={idx} tabindex="0">
              <img
                src={img.src}
                alt={img.alt}
                draggable="false"
                data-index={idx}
                class="slider-img"
              />
            </div>
          );
        }
      )
    }
  </div>
  <div class="slider-controls">
    <button class="prev-btn" aria-label="Previous image">&#8592;</button>
    <div class="dots">
      {
        images.map(
          /**
           * @param {_} _
           * @param {number} idx
           */
          function (_: unknown, idx: number) {
            return (
              <button
                class="dot"
                data-index={idx}
                aria-label={`Go to image ${idx + 1}`}
              />
            );
          }
        )
      }
    </div>
    <button class="next-btn" aria-label="Next image">&#8594;</button>
  </div>

  <div class="slider-overlay" tabindex="-1" style="display:none;">
    <div class="overlay-bg"></div>
    <button class="overlay-close" aria-label="Schließen">&times;</button>
    <button class="overlay-prev" aria-label="Vorheriges Bild">&#8592;</button>
    <div class="overlay-img-container">
      <img class="overlay-img" src="" alt="" draggable="false" />
    </div>
    <button class="overlay-next" aria-label="Nächstes Bild">&#8594;</button>
  </div>
</div>

<style>
  .image-slider {
    position: relative;
    width: 100%;
    max-width: 600px;
    margin: 0 auto;
    overflow: hidden;
    touch-action: pan-y pinch-zoom;
  }
  .slider-track {
    display: flex;
    transition: transform 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    will-change: transform;
  }
  .slider-slide {
    min-width: 100%;
    user-select: none;
    display: flex;
    justify-content: center;
    align-items: center;
    overflow: hidden;
    background: #fff;
    position: relative;
  }
  .slider-slide img {
    width: 100%;
    height: auto;
    max-height: 60vh;
    object-fit: contain;
    transition: transform 0.3s;
    touch-action: none;
    cursor: pointer;
  }
  .slider-controls {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 1rem;
    margin-top: 1rem;
  }
  .prev-btn,
  .next-btn {
    background: #eee;
    border: none;
    border-radius: 50%;
    width: 2.5rem;
    height: 2.5rem;
    font-size: 1.5rem;
    cursor: pointer;
    transition: background 0.2s;
  }
  .prev-btn:hover,
  .next-btn:hover {
    background: #ccc;
  }
  .dots {
    display: flex;
    gap: 0.5rem;
  }
  .dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background: #ddd;
    border: none;
    cursor: pointer;
    transition:
      background 0.2s,
      transform 0.2s;
  }
  .dot.active {
    background: #f1c40f; /* website yellow */
    transform: scale(1.3);
  }

  /* Overlay styles */
  .slider-overlay {
    position: fixed;
    z-index: 1000;
    inset: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: row;
    background: rgba(0, 0, 0, 0.3);
    backdrop-filter: blur(8px);
    transition: opacity 0.3s;
    opacity: 1;
  }
  .slider-overlay[aria-hidden="true"] {
    opacity: 0;
    pointer-events: none;
  }
  .overlay-bg {
    position: absolute;
    inset: 0;
    background: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(16px);
    z-index: 0;
  }
  .overlay-img-container {
    position: relative;
    z-index: 2;
    max-width: 90vw;
    max-height: 90vh;
    display: flex;
    align-items: center;
    justify-content: center;
    flex: 1 1 auto;
  }
  .overlay-img {
    max-width: 90vw;
    max-height: 90vh;
    width: auto;
    height: auto;
    object-fit: contain;
    background: #fff;
    border-radius: 1rem;
    box-shadow: 0 4px 32px rgba(0, 0, 0, 0.3);
    transition: transform 0.3s;
    touch-action: none;
    cursor: grab;
    background-color: #eee; /* fallback background for debugging */
  }
  .overlay-close {
    position: absolute;
    top: 2rem;
    right: 2rem;
    z-index: 10;
    background: rgba(255, 255, 255, 0.8);
    border: none;
    border-radius: 50%;
    width: 2.5rem;
    height: 2.5rem;
    font-size: 2rem;
    cursor: pointer;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }
  .overlay-prev,
  .overlay-next {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    z-index: 10;
    background: rgba(255, 255, 255, 0.8);
    border: none;
    border-radius: 50%;
    width: 2.5rem;
    height: 2.5rem;
    font-size: 2rem;
    cursor: pointer;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    display: flex;
    align-items: center;
    justify-content: center;
  }
  .overlay-prev {
    left: 2rem;
  }
  .overlay-next {
    right: 2rem;
  }
  @media (max-width: 900px) {
    .overlay-prev {
      left: 0.5rem;
    }
    .overlay-next {
      right: 0.5rem;
    }
  }
  @media (max-width: 600px) {
    .image-slider {
      max-width: 100vw;
    }
    .slider-slide img {
      max-height: 40vh;
    }
    .overlay-img {
      max-width: 98vw;
      max-height: 70vh;
    }
    .overlay-prev,
    .overlay-next {
      top: 50%;
      transform: translateY(-50%);
      width: 2.2rem;
      height: 2.2rem;
      font-size: 1.5rem;
      left: unset;
      right: unset;
    }
    .overlay-prev {
      left: 1rem;
    }
    .overlay-next {
      right: 1rem;
    }
    .prev-btn,
    .next-btn {
      display: none;
    }
  }
</style>

<script>
  let images: { src: string; alt: string }[] = [];
  document.addEventListener("DOMContentLoaded", function () {
    // Parse images from JSON script tag
    const imagesScript = document.getElementById("slider-images");
    if (imagesScript) {
      try {
        images = JSON.parse(imagesScript.textContent!);
      } catch (e) {
        images = [];
      }
    }
    console.log("Client images array:", images);

    // DOM elements
    let track: HTMLElement | null = document.querySelector(".slider-track");
    let slides = document.querySelectorAll(".slider-slide");
    let dots = document.querySelectorAll(".dot");
    let prevBtn = document.querySelector(".prev-btn");
    let nextBtn = document.querySelector(".next-btn");

    if (!track || !slides.length) {
      // Don't run slider logic if not present
      return;
    }

    let current = 0;
    let isDragging = false;
    let wasDragged = false;
    let startX = 0;
    let currentX = 0;
    let zoomed = false;
    let lastTap = 0;
    let pinchStartDist = 0;
    let pinchStartScale = 1;
    let activeImg = null;

    // Overlay state
    let overlay: HTMLElement | null = document.querySelector(".slider-overlay");
    let overlayImg: HTMLImageElement | null = overlay
      ? overlay.querySelector(".overlay-img")
      : null;
    let overlayClose = overlay ? overlay.querySelector(".overlay-close") : null;
    let overlayPrev = overlay ? overlay.querySelector(".overlay-prev") : null;
    let overlayNext = overlay ? overlay.querySelector(".overlay-next") : null;
    let overlayImgContainer = overlay
      ? overlay.querySelector(".overlay-img-container")
      : null;
    let overlayIndex = 0;
    let overlayZoomed = false;
    let overlayPinchStartDist = 0;
    let overlayPinchStartScale = 1;

    function setSlide(idx: number) {
      current = Math.max(0, Math.min(idx, slides.length - 1));
      if (track) {
        track.style.transform = `translateX(-${current * 100}%)`;
      }
      dots.forEach(function (dot, i) {
        dot.classList.toggle("active", i === current);
      });
    }

    function next() {
      setSlide(current + 1);
    }
    function prev() {
      setSlide(current - 1);
    }

    function onDotClick(e: Event) {
      const target = e.target as HTMLElement | null;
      if (target && target.dataset && target.dataset.index !== undefined) {
        setSlide(Number(target.dataset.index));
      }
    }

    function onTouchStart(e: TouchEvent | MouseEvent) {
      if (zoomed) return;
      isDragging = true;
      wasDragged = false;
      if (e instanceof TouchEvent) {
        startX = e.touches[0].clientX;
      } else if (e instanceof MouseEvent) {
        startX = e.clientX;
      }
      if (track) track.style.transition = "none";
    }

    function onTouchMove(e: TouchEvent | MouseEvent) {
      if (!isDragging || zoomed) return;
      wasDragged = true;
      if (e instanceof TouchEvent) {
        currentX = e.touches[0].clientX;
      } else if (e instanceof MouseEvent) {
        currentX = e.clientX;
      }
      const dx = currentX - startX;
      if (track)
        track.style.transform = `translateX(calc(${-current * 100}% + ${dx}px))`;
    }

    function onTouchEnd(e: TouchEvent | MouseEvent) {
      if (!isDragging || zoomed) return;
      isDragging = false;
      if (track) track.style.transition = "";
      const dx = (currentX || startX) - startX;
      if (dx > 50) prev();
      else if (dx < -50) next();
      else setSlide(current);
      currentX = 0;
    }

    // Overlay logic
    /** @param {number} idx */
    function openOverlay(idx: number) {
      overlayIndex = idx;
      updateOverlayImage();
      if (overlay) {
        overlay.style.display = "flex";
        overlay.setAttribute("aria-hidden", "false");
        document.body.style.overflow = "hidden";
        overlay.focus();
      }
    }

    function closeOverlay() {
      if (overlay) {
        overlay.style.display = "none";
        overlay.setAttribute("aria-hidden", "true");
        document.body.style.overflow = "";
        resetOverlayZoom();
      }
    }

    function updateOverlayImage() {
      const img = images[overlayIndex];
      console.log("Overlay image:", img);
      console.log("Overlay image element:", overlayImg);
      if (!img || !overlayImg) return;
      overlayImg.src = img.src;
      overlayImg.alt = img.alt;
      resetOverlayZoom();
    }

    function overlayNextImg() {
      overlayIndex = (overlayIndex + 1) % images.length;
      updateOverlayImage();
    }
    function overlayPrevImg() {
      overlayIndex = (overlayIndex - 1 + images.length) % images.length;
      updateOverlayImage();
    }

    function resetOverlayZoom() {
      if (overlayImg) {
        overlayImg.style.transform = "";
        overlayImg.dataset.scale = "1";
        overlayZoomed = false;
      }
    }

    function overlayToggleZoom(img: HTMLElement, e: Event) {
      if (!img) return;
      if (!overlayZoomed) {
        img.style.transform = "scale(2)";
        img.dataset.scale = "2";
        overlayZoomed = true;
      } else {
        img.style.transform = "";
        img.dataset.scale = "1";
        overlayZoomed = false;
      }
    }

    /** @param {MouseEvent} e */
    function overlayOnImgClick(e: MouseEvent) {
      if (e.detail === 2 && e.target instanceof HTMLElement)
        overlayToggleZoom(e.target, e);
    }

    /** @param {TouchEvent} e */
    function overlayOnImgDoubleTap(e: TouchEvent) {
      const now = Date.now();
      if (now - lastTap < 300) {
        if (e.target instanceof HTMLElement) {
          overlayToggleZoom(e.target, e);
        }
      }
      lastTap = now;
    }

    function overlayGetDistance(touches: TouchList) {
      const [a, b] = [touches[0], touches[1]];
      return Math.hypot(a.clientX - b.clientX, a.clientY - b.clientY);
    }

    function overlayOnImgTouchStart(e: TouchEvent) {
      if (e.touches && e.touches.length === 2 && overlayImg) {
        overlayPinchStartDist = overlayGetDistance(e.touches);
        if (e.target instanceof HTMLElement) {
          overlayPinchStartScale = Number(e.target.dataset.scale) || 1;
        }
      }
    }

    function overlayOnImgTouchMove(e: TouchEvent) {
      if (e.touches && e.touches.length === 2 && overlayImg) {
        const dist = overlayGetDistance(e.touches);
        let scale = Math.max(
          1,
          Math.min(3, overlayPinchStartScale * (dist / overlayPinchStartDist))
        );
        overlayImg.style.transform = `scale(${scale})`;
        overlayImg.dataset.scale = String(scale);
        overlayZoomed = scale > 1.05;
        e.preventDefault();
      }
    }

    function overlayOnImgTouchEnd(e: TouchEvent) {
      if (overlayImg && (Number(overlayImg.dataset.scale) || 1) <= 1.05) {
        overlayImg.style.transform = "";
        overlayImg.dataset.scale = "1";
        overlayZoomed = false;
      }
    }

    function overlayOnKeyDown(e: KeyboardEvent) {
      if (e.key === "Escape") closeOverlay();
      if (e.key === "ArrowRight") overlayNextImg();
      if (e.key === "ArrowLeft") overlayPrevImg();
    }

    /** @param {MouseEvent} e */
    function overlayOnBgClick(e: MouseEvent) {
      if (e.target === overlay) closeOverlay();
    }

    /** @param {TouchEvent} e */
    function overlayOnSwipeStart(e: TouchEvent) {
      if (e.touches && e.touches.length === 1) {
        startX = e.touches[0].clientX;
      }
    }
    /** @param {TouchEvent} e */
    function overlayOnSwipeMove(e: TouchEvent) {
      if (e.touches && e.touches.length === 1) {
        currentX = e.touches[0].clientX;
      }
    }
    /** @param {TouchEvent} e */
    function overlayOnSwipeEnd(e: TouchEvent) {
      if (startX && currentX) {
        const dx = currentX - startX;
        if (dx > 50) overlayPrevImg();
        else if (dx < -50) overlayNextImg();
      }
      startX = 0;
      currentX = 0;
    }

    setSlide(0);
    if (prevBtn) prevBtn.addEventListener("click", prev);
    if (nextBtn) nextBtn.addEventListener("click", next);
    dots.forEach(
      /** @param {HTMLElement} dot */
      function (dot) {
        dot.addEventListener("click", onDotClick);
      }
    );

    // Touch/drag for slider
    if (track) {
      track.addEventListener("mousedown", onTouchStart);
      track.addEventListener("mousemove", onTouchMove);
      track.addEventListener("mouseup", onTouchEnd);
      track.addEventListener("mouseleave", onTouchEnd);
      track.addEventListener("touchstart", onTouchStart);
      track.addEventListener("touchmove", onTouchMove);
      track.addEventListener("touchend", onTouchEnd);
    }

    // Open overlay on image click
    document.querySelectorAll(".slider-img").forEach(
      /** @param {HTMLElement} img */
      function (img) {
        img.addEventListener("click", function () {
          if (wasDragged) return; // Prevent opening overlay after drag
          const idx = Number(img.getAttribute("data-index"));
          if (!isNaN(idx)) {
            openOverlay(idx);
          }
        });
      }
    );

    if (overlayClose) overlayClose.addEventListener("click", closeOverlay);
    if (overlayPrev) overlayPrev.addEventListener("click", overlayPrevImg);
    if (overlayNext) overlayNext.addEventListener("click", overlayNextImg);
    if (overlay) {
      overlay.addEventListener("click", overlayOnBgClick);
      overlay.addEventListener("keydown", overlayOnKeyDown);
    }

    // Overlay image zoom
    if (overlayImg) {
      overlayImg.addEventListener("touchstart", overlayOnImgTouchStart);
      overlayImg.addEventListener("touchmove", overlayOnImgTouchMove, {
        passive: false,
      });
      overlayImg.addEventListener("touchend", overlayOnImgTouchEnd);
      overlayImg.addEventListener("click", overlayOnImgClick);
      overlayImg.addEventListener("touchend", overlayOnImgDoubleTap);

      // Overlay swipe navigation
      overlayImg.addEventListener("touchstart", overlayOnSwipeStart);
      overlayImg.addEventListener("touchmove", overlayOnSwipeMove);
      overlayImg.addEventListener("touchend", overlayOnSwipeEnd);
    }
  });
</script>
